package com.study.springboot.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.study.springboot.dto.SimpleBbsDto;

// @Repository 어노테이션을 통해 스프링 컨테이너 시작시 자동으로 빈이 생성된다.
@Repository
public class SimpleBbsDao implements ISimpleBbsDao {
	/*
	 	인터페이스를 구현한 클래스이므로 정의된 추상메서드를 일괄적으로 오버라이딩
	 	해야 한다. 따라서 이 부분은 자동완성 기능을 사용하면 편리하다.
	 */
	@Autowired
	JdbcTemplate template;
	
	@Override
	public List<SimpleBbsDto> listDAO() {
		System.out.println("listDAO()");
		
		String query = "SELECT * FROM simple_bbs ORDER BY id DESC";
		List<SimpleBbsDto> dtos = template.query(
			query, new BeanPropertyRowMapper<SimpleBbsDto>(SimpleBbsDto.class));
		return dtos;
	}
	@Override
	public SimpleBbsDto viewDAO(String id) {
		System.out.println("viewDAO()");
		
		String query = "SELECT * FROM simple_bbs WHERE id = " + id;
		SimpleBbsDto dto = template.queryForObject(
			query, new BeanPropertyRowMapper<SimpleBbsDto>(SimpleBbsDto.class));
		return dto;
	}
	
	@Override
	public int deleteDAO(final String id) {
		System.out.println("deleteDAO()");
		
		String query = "DELETE FROM simple_bbs WHERE id = ?";
		return template.update(query, Integer.parseInt(id));
	}
	@Override
	public int writeDAO(final String writer, final String title, 
			final String content) {
		System.out.println("writeDAO()");
		
		String query =
				"INSERT INTO simple_bbs (id, writer, title, content) " +
				" VALUES (simple_bbs_seq.NEXTVAL, ?, ?, ?)";
		return template.update(query, writer, title, content);
	}
}
